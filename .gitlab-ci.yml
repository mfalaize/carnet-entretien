image: docker:stable
services:
  - docker:dind

stages:
  - build
  - release
  - deploy

variables:
  CONTAINER_BUILD_IMAGE: registry.gitlab.com/mfalaize/homelab:$CI_COMMIT_REF_NAME
  CONTAINER_RELEASE_IMAGE: mfalaize/homelab:latest
  CONTAINER_RELEASE_TAG_IMAGE: mfalaize/homelab:$CI_COMMIT_TAG

before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ##
  - 'which ssh-agent || ( apk add --no-cache openssh-client )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD

## Construit l'image et la stocke sur le registry docker gitlab
build:
  stage: build
  script:
    - docker build --pull --no-cache -t $CONTAINER_BUILD_IMAGE .
    - docker push $CONTAINER_BUILD_IMAGE

## Effectue la release sur le docker hub
release:
  stage: release
  script:
    - docker pull $CONTAINER_BUILD_IMAGE
    - docker tag $CONTAINER_BUILD_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - master

## Effectue la release du tag sur le docker hub
release-tag:
  stage: release
  script:
    - docker pull $CONTAINER_BUILD_IMAGE
    - docker tag $CONTAINER_BUILD_IMAGE $CONTAINER_RELEASE_TAG_IMAGE
    - docker push $CONTAINER_RELEASE_TAG_IMAGE
  only:
    - tags

## DÃ©ploie l'image docker sur le serveur de production
deploy:
  stage: deploy
  script:
    - ssh $DEPLOY_USER@$DEPLOY_HOST 'bash -s' < docker_install.sh
  environment:
    name: production
  only:
    - master
